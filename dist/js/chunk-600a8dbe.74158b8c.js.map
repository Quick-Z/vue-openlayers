{"version":3,"sources":["webpack:///./node_modules/ol/Overlay.js","webpack:///./src/views/overviewMap/OverviewMap.vue?b6b7","webpack:///./src/views/overviewMap/OverviewMap.vue?9235","webpack:///src/views/overviewMap/OverviewMap.vue","webpack:///./src/views/overviewMap/OverviewMap.vue?8827","webpack:///./src/views/overviewMap/OverviewMap.vue","webpack:///./node_modules/ol/OverlayPositioning.js","webpack:///./node_modules/ol/control/OverviewMap.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","_super","options","_this","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","TOP_LEFT","setPosition","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","BOTTOM_RIGHT","CENTER_RIGHT","TOP_RIGHT","BOTTOM_CENTER","CENTER_CENTER","TOP_CENTER","BOTTOM_LEFT","CENTER_LEFT","transform","msTransform","getOptions","_vm","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","attrs","name","data","methods","initMap","layers","collapseLabel","label","collapsed","Map","target","controls","control","interactions","view","View","zoom","mounted","console","log","component","MAX_RATIO","MIN_RATIO","ControlledMap","apply","arguments","createRenderer","OverviewMap","opt_options","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","tipLabel","collapseLabel_","textContent","label_","activeLabel","button","setAttribute","title","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","ovmap_","ovmap","forEach","layer","addLayer","boxSizing","boxOverlay_","addOverlay","cssClasses","scope","overlay","overlayBox","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","endMoving","setCenterInternal","removeEventListener","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","updateBoxAfterOvmapIsRendered_","key","VIEW","newView","TARGET","SIZE","projection","getProjection","setView","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","bottomRightPixel","boxWidth","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","LN2","ratio","pow","fitInternal","updateBox_","rotation","resolution","getResolution","ovresolution","width","height","ovmapPostrenderKey_","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"mappings":"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","file":"js/chunk-600a8dbe.74158b8c.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {import(\"./OverlayPositioning.js\").default} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning',\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {OverlayOnSignature<import(\"./Observable\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {OverlayOnSignature<import(\"./Observable\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {OverlayOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst =\n            options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className =\n            options.className !== undefined\n                ? options.className\n                : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        _this.element.style.pointerEvents = 'auto';\n        var autoPan = options.autoPan;\n        if (autoPan && 'object' !== typeof autoPan) {\n            autoPan = {\n                animation: options.autoPanAnimation,\n                margin: options.autoPanMargin,\n            };\n        }\n        /**\n         * @protected\n         * @type {PanIntoViewOptions|false}\n         */\n        _this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n        /**\n         * @protected\n         * @type {{transform_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            transform_: '',\n            visible: true,\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n        _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning !== undefined\n            ? /** @type {import(\"./OverlayPositioning.js\").default} */ (options.positioning)\n            : OverlayPositioning.TOP_LEFT);\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return /** @type {import(\"./PluggableMap.js\").default|undefined} */ (this.get(Property.MAP));\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {import(\"./OverlayPositioning.js\").default} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return /** @type {import(\"./OverlayPositioning.js\").default} */ (this.get(Property.POSITIONING));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent\n                ? map.getOverlayContainerStopEvent()\n                : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n            this.performAutoPan();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n    Overlay.prototype.performAutoPan = function () {\n        if (this.autoPan) {\n            this.panIntoView(this.autoPan);\n        }\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n     * @api\n     */\n    Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [\n            outerWidth(element),\n            outerHeight(element),\n        ]);\n        var panIntoViewOptions = opt_panIntoViewOptions || {};\n        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - myMargin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + myMargin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - myMargin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + myMargin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) {\n                    return;\n                }\n                var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n                var panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing,\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {import(\"./OverlayPositioning.js\").default} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var x = Math.round(pixel[0] + offset[0]) + 'px';\n        var y = Math.round(pixel[1] + offset[1]) + 'px';\n        var posX = '0%';\n        var posY = '0%';\n        if (positioning == OverlayPositioning.BOTTOM_RIGHT ||\n            positioning == OverlayPositioning.CENTER_RIGHT ||\n            positioning == OverlayPositioning.TOP_RIGHT) {\n            posX = '-100%';\n        }\n        else if (positioning == OverlayPositioning.BOTTOM_CENTER ||\n            positioning == OverlayPositioning.CENTER_CENTER ||\n            positioning == OverlayPositioning.TOP_CENTER) {\n            posX = '-50%';\n        }\n        if (positioning == OverlayPositioning.BOTTOM_LEFT ||\n            positioning == OverlayPositioning.BOTTOM_CENTER ||\n            positioning == OverlayPositioning.BOTTOM_RIGHT) {\n            posY = '-100%';\n        }\n        else if (positioning == OverlayPositioning.CENTER_LEFT ||\n            positioning == OverlayPositioning.CENTER_CENTER ||\n            positioning == OverlayPositioning.CENTER_RIGHT) {\n            posY = '-50%';\n        }\n        var transform = \"translate(\" + posX + \", \" + posY + \") translate(\" + x + \", \" + y + \")\";\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n            // @ts-ignore IE9\n            style.msTransform = transform;\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n//# sourceMappingURL=Overlay.js.map","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OverviewMap.vue?vue&type=style&index=0&id=0fc24648&lang=scss&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"vm\"},[_c('h2',{staticClass:\"h-title\"},[_vm._v(\"总览控件（鹰眼、小地图） OverviewMap\")]),_c('div',{staticClass:\"map-x\",attrs:{\"id\":\"map\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"vm\">\r\n    <h2 class=\"h-title\">总览控件（鹰眼、小地图） OverviewMap</h2>\r\n    <div id=\"map\" class=\"map-x\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'ol/ol.css'\r\nimport { Map, View } from 'ol'\r\nimport Tile from 'ol/layer/Tile'\r\nimport { OSM } from 'ol/source'\r\nimport * as control from 'ol/control'\r\nimport * as olInteraction from 'ol/interaction';\r\n\r\nexport default {\r\n  name: 'OverviewMap',\r\n  data () {\r\n    return {\r\n      map: null\r\n    }\r\n  },\r\n  methods: {\r\n    initMap () {\r\n\r\n      let overviewMapControl = new control.OverviewMap({\r\n        className: 'ol-overviewmap ol-custom-overviewmap',\r\n        layers: [\r\n          new Tile({\r\n            source: new OSM({\r\n              'url': 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' + '?apikey=0e6fc415256d4fbb9b5166a718591d71'\r\n            })\r\n          })\r\n        ],\r\n        collapseLabel: '\\u00BB',\r\n        label: '\\u00AB',\r\n        collapsed: false\r\n      })\r\n\r\n      this.map = new Map({\r\n        target: 'map',\r\n        controls: control.defaults().extend([\r\n          overviewMapControl\r\n        ]),\r\n        interactions: olInteraction.defaults().extend([\r\n          new olInteraction.DragRotateAndZoom()\r\n        ]),\r\n        layers: [\r\n          new Tile({\r\n            source: new OSM()\r\n          })\r\n        ],\r\n        view: new View({\r\n          // projection: \"EPSG:4326\", // 坐标系，有EPSG:4326和EPSG:3857\r\n          center: [114.064839, 22.548857],\r\n          zoom: 6 // 地图缩放级别（打开页面时默认级别）\r\n        })\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.initMap()\r\n    console.log(olInteraction)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  ::v-deep .ol-custom-overviewmap,\r\n  ::v-deep .ol-custom-overviewmap.ol-uncollapsible {\r\n    bottom: auto;\r\n    left: auto;\r\n    right: 0;\r\n    top: 0;\r\n  }\r\n\r\n  ::v-deep .ol-custom-overviewmap:not(.ol-collapsed) {\r\n    border: 1px solid black;\r\n  }\r\n\r\n  ::v-deep .ol-custom-overviewmap .ol-overviewmap-map {\r\n    border: none;\r\n    width: 300px;\r\n  }\r\n\r\n  ::v-deep .ol-custom-overviewmap .ol-overviewmap-box {\r\n    border: 2px solid red;\r\n  }\r\n\r\n  ::v-deep .ol-custom-overviewmap:not(.ol-collapsed) button {\r\n    bottom: auto;\r\n    left: auto;\r\n    right: 1px;\r\n    top: 1px;\r\n  }\r\n\r\n  ::v-deep .ol-rotate {\r\n    top: 170px;\r\n    right: 0;\r\n  }\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OverviewMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OverviewMap.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./OverviewMap.vue?vue&type=template&id=0fc24648&scoped=true&\"\nimport script from \"./OverviewMap.vue?vue&type=script&lang=js&\"\nexport * from \"./OverviewMap.vue?vue&type=script&lang=js&\"\nimport style0 from \"./OverviewMap.vue?vue&type=style&index=0&id=0fc24648&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0fc24648\",\n  null\n  \n)\n\nexport default component.exports","/**\n * @module ol/OverlayPositioning\n */\n/**\n * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, `'top-right'`\n * @enum {string}\n */\nexport default {\n    BOTTOM_LEFT: 'bottom-left',\n    BOTTOM_CENTER: 'bottom-center',\n    BOTTOM_RIGHT: 'bottom-right',\n    CENTER_LEFT: 'center-left',\n    CENTER_CENTER: 'center-center',\n    CENTER_RIGHT: 'center-right',\n    TOP_LEFT: 'top-left',\n    TOP_CENTER: 'top-center',\n    TOP_RIGHT: 'top-right',\n};\n//# sourceMappingURL=OverlayPositioning.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter, } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */ (function (_super) {\n    __extends(ControlledMap, _super);\n    function ControlledMap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ControlledMap.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return ControlledMap;\n}(PluggableMap));\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */ (function (_super) {\n    __extends(OverviewMap, _super);\n    /**\n     * @param {Options} [opt_options] OverviewMap options.\n     */\n    function OverviewMap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         */\n        _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotateWithView_ =\n            options.rotateWithView !== undefined ? options.rotateWithView : false;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        _this.viewExtent_ = undefined;\n        var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : '\\u00BB';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(activeLabel);\n        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        _this.ovmapDiv_ = document.createElement('div');\n        _this.ovmapDiv_.className = 'ol-overviewmap-map';\n        /**\n         * Explicitly given view to be used instead of a view derived from the main map.\n         * @type {View}\n         * @private\n         */\n        _this.view_ = options.view;\n        /**\n         * @type {ControlledMap}\n         * @private\n         */\n        _this.ovmap_ = new ControlledMap({\n            view: options.view,\n        });\n        var ovmap = _this.ovmap_;\n        if (options.layers) {\n            options.layers.forEach(function (layer) {\n                ovmap.addLayer(layer);\n            });\n        }\n        var box = document.createElement('div');\n        box.className = 'ol-overviewmap-box';\n        box.style.boxSizing = 'border-box';\n        /**\n         * @type {import(\"../Overlay.js\").default}\n         * @private\n         */\n        _this.boxOverlay_ = new Overlay({\n            position: [0, 0],\n            positioning: OverlayPositioning.CENTER_CENTER,\n            element: box,\n        });\n        _this.ovmap_.addOverlay(_this.boxOverlay_);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.ovmapDiv_);\n        element.appendChild(button);\n        /* Interactive map */\n        var scope = _this;\n        var overlay = _this.boxOverlay_;\n        var overlayBox = _this.boxOverlay_.getElement();\n        /* Functions definition */\n        var computeDesiredMousePosition = function (mousePosition) {\n            return {\n                clientX: mousePosition.clientX,\n                clientY: mousePosition.clientY,\n            };\n        };\n        var move = function (event) {\n            var position = /** @type {?} */ (computeDesiredMousePosition(event));\n            var coordinates = ovmap.getEventCoordinateInternal(\n            /** @type {MouseEvent} */ (position));\n            overlay.setPosition(coordinates);\n        };\n        var endMoving = function (event) {\n            var coordinates = ovmap.getEventCoordinateInternal(event);\n            scope.getMap().getView().setCenterInternal(coordinates);\n            window.removeEventListener('mousemove', move);\n            window.removeEventListener('mouseup', endMoving);\n        };\n        /* Binding */\n        overlayBox.addEventListener('mousedown', function () {\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', endMoving);\n        });\n        return _this;\n    }\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    OverviewMap.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (map === oldMap) {\n            return;\n        }\n        if (oldMap) {\n            var oldView = oldMap.getView();\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            this.ovmap_.setTarget(null);\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.ovmap_.setTarget(this.ovmapDiv_);\n            this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n            var view = map.getView();\n            if (view) {\n                this.bindView_(view);\n                if (view.isDef()) {\n                    this.ovmap_.updateSize();\n                    this.resetExtent_();\n                }\n            }\n            if (!this.ovmap_.isRendered()) {\n                this.updateBoxAfterOvmapIsRendered_();\n            }\n        }\n    };\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n    OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n        if (event.key === MapProperty.VIEW) {\n            var oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            var newView = this.getMap().getView();\n            this.bindView_(newView);\n        }\n        else if (!this.ovmap_.isRendered() &&\n            (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n            this.ovmap_.updateSize();\n        }\n    };\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.bindView_ = function (view) {\n        if (!this.view_) {\n            // Unless an explicit view definition was given, derive default from whatever main map uses.\n            var newView = new View({\n                projection: view.getProjection(),\n            });\n            this.ovmap_.setView(newView);\n        }\n        view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n        // Sync once with the new view\n        this.handleRotationChanged_();\n    };\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.unbindView_ = function (view) {\n        view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    };\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n    OverviewMap.prototype.handleRotationChanged_ = function () {\n        if (this.rotateWithView_) {\n            this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n        }\n    };\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n    OverviewMap.prototype.validateExtent_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n            // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n            return;\n        }\n        this.viewExtent_ = extent;\n        var ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n        var ovview = ovmap.getView();\n        var ovextent = ovview.calculateExtentInternal(ovmapSize);\n        var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n        var ovmapWidth = ovmapSize[0];\n        var ovmapHeight = ovmapSize[1];\n        if (boxWidth < ovmapWidth * MIN_RATIO ||\n            boxHeight < ovmapHeight * MIN_RATIO ||\n            boxWidth > ovmapWidth * MAX_RATIO ||\n            boxHeight > ovmapHeight * MAX_RATIO) {\n            this.resetExtent_();\n        }\n        else if (!containsExtent(ovextent, extent)) {\n            this.recenter_();\n        }\n    };\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n    OverviewMap.prototype.resetExtent_ = function () {\n        if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n            return;\n        }\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        var ovview = ovmap.getView();\n        // get how many times the current map overview could hold different\n        // box sizes using the min and max ratio, pick the step in the middle used\n        // to calculate the extent from the main map to set it to the overview map,\n        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n        scaleFromCenter(extent, ratio);\n        ovview.fitInternal(polygonFromExtent(extent));\n    };\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n    OverviewMap.prototype.recenter_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        ovview.setCenterInternal(view.getCenterInternal());\n    };\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n    OverviewMap.prototype.updateBox_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n        var overlay = this.boxOverlay_;\n        var box = this.boxOverlay_.getElement();\n        var center = view.getCenterInternal();\n        var resolution = view.getResolution();\n        var ovresolution = ovview.getResolution();\n        var width = (mapSize[0] * resolution) / ovresolution;\n        var height = (mapSize[1] * resolution) / ovresolution;\n        // set position using center coordinates\n        overlay.setPosition(center);\n        // set box size calculated from map extent size and overview map resolution\n        if (box) {\n            box.style.width = width + 'px';\n            box.style.height = height + 'px';\n            var transform = 'rotate(' + rotation + 'rad)';\n            box.style.transform = transform;\n        }\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n        if (this.ovmapPostrenderKey_) {\n            return;\n        }\n        this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n            delete this.ovmapPostrenderKey_;\n            this.updateBox_();\n        }, this);\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    OverviewMap.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        // manage overview map if it had not been rendered before and control\n        // is expanded\n        var ovmap = this.ovmap_;\n        if (!this.collapsed_) {\n            if (ovmap.isRendered()) {\n                this.viewExtent_ = undefined;\n                ovmap.render();\n                return;\n            }\n            ovmap.updateSize();\n            this.resetExtent_();\n            this.updateBoxAfterOvmapIsRendered_();\n        }\n    };\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (!collapsible && this.collapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsed = function (collapsed) {\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n    OverviewMap.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n    OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n        if (this.rotateWithView_ === rotateWithView) {\n            return;\n        }\n        this.rotateWithView_ = rotateWithView;\n        if (this.getMap().getView().getRotation() !== 0) {\n            if (this.rotateWithView_) {\n                this.handleRotationChanged_();\n            }\n            else {\n                this.ovmap_.getView().setRotation(0);\n            }\n            this.viewExtent_ = undefined;\n            this.validateExtent_();\n            this.updateBox_();\n        }\n    };\n    /**\n     * Return the overview map.\n     * @return {import(\"../PluggableMap.js\").default} Overview map.\n     * @api\n     */\n    OverviewMap.prototype.getOverviewMap = function () {\n        return this.ovmap_;\n    };\n    /**\n     * Update the overview map element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    OverviewMap.prototype.render = function (mapEvent) {\n        this.validateExtent_();\n        this.updateBox_();\n    };\n    return OverviewMap;\n}(Control));\nexport default OverviewMap;\n//# sourceMappingURL=OverviewMap.js.map"],"sourceRoot":""}