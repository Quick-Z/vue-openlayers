{"version":3,"sources":["webpack:///./src/views/vectorHigh/vectorHigh.vue?c861","webpack:///src/views/vectorHigh/vectorHigh.vue","webpack:///./src/views/vectorHigh/vectorHigh.vue?d575","webpack:///./src/views/vectorHigh/vectorHigh.vue","webpack:///./node_modules/ol/style/Text.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","ref","attrs","staticRenderFns","data","map","highlightStyle","Style","stroke","Stroke","color","width","fill","Fill","text","Text","font","highlight","featureOverlay","methods","displayFeatureInfo","source","style","info","innerHTML","feature","getId","get","getSource","removeFeature","addFeature","initMap","features","GeoJSON","dataProjection","featureProjection","Map","target","layers","vectorLayer","view","View","projection","center","zoom","on","evt","dragging","mounted","component","DEFAULT_FILL_COLOR","opt_options","options","font_","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","textAlign_","textAlign","textBaseline_","textBaseline","fill_","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","clone","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"mappings":"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","file":"js/chunk-1a0664a3.29facf2f.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"vm\"},[_c('h2',{staticClass:\"h-title\"},[_vm._v(\"矢量图 - 高亮模块\")]),_c('div',{ref:\"info\"}),_c('div',{staticClass:\"map-x\",attrs:{\"id\":\"map\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"vm\">\r\n    <h2 class=\"h-title\">矢量图 - 高亮模块</h2>\r\n    <div ref=\"info\"></div>\r\n    <div id=\"map\" class=\"map-x\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'ol/ol.css'\r\nimport { Map, View } from 'ol'\r\nimport { Style, Fill, Stroke, Text } from 'ol/style'\r\nimport LayerVector from 'ol/layer/Vector'\r\nimport SourceVector from 'ol/source/Vector'\r\nimport lands from '@/assets/data/lands.json'\r\nimport GeoJSON from 'ol/format/GeoJSON'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      highlightStyle: new Style({\r\n        stroke: new Stroke({\r\n          color: '#f00',\r\n          width: 1\r\n        }),\r\n        fill: new Fill({\r\n          color: 'rgba(255, 0, 0, 0.1)'\r\n        }),\r\n        text: new Text({\r\n          font: '12px Calibri, sans-serif',\r\n          fill: new Fill({\r\n            color: '#000'\r\n          }),\r\n          stroke: new Stroke({\r\n            color: '#f00',\r\n            width: 3\r\n          })\r\n        })\r\n      }),\r\n      highlight: null,\r\n      featureOverlay: null\r\n    }\r\n  },\r\n  methods: {\r\n    displayFeatureInfo(pixel) {\r\n      if(!this.featureOverlay){\r\n        this.featureOverlay = new LayerVector({\r\n          source: new SourceVector(),\r\n          map: this.map,\r\n          style: feature => {\r\n            this.highlightStyle.getText().setText(feature.get('name'))\r\n            return this.highlightStyle\r\n          }\r\n        })\r\n      }\r\n\r\n      let feature = this.map.forEachFeatureAtPixel(pixel, feature => feature)\r\n      let info = this.$refs.info\r\n\r\n      if (feature) {\r\n        info.innerHTML = feature.getId() + ': ' + feature.get('name')\r\n      } else {\r\n        info.innerHTML = \"&nbsp;\"\r\n      }\r\n\r\n      if (feature !== this.highlight) {\r\n        if (this.highlight) {\r\n          this.featureOverlay.getSource().removeFeature(this.highlight)\r\n        }\r\n        if (feature) {\r\n          this.featureOverlay.getSource().addFeature(feature)\r\n        }\r\n        this.highlight = feature\r\n      }\r\n    },\r\n    initMap() {\r\n\r\n      let style = new Style({\r\n        fill: new Fill({\r\n          color: \"rgba(255, 255, 255, 0.6)\"\r\n        }),\r\n        stroke: new Stroke({\r\n          color: \"#319FD3\",\r\n          width: 1\r\n        }),\r\n        text: new Text({\r\n          font: \"12px Calibri,sans-serif\",\r\n          fill: new Fill({\r\n            color: \"#000\"\r\n          }),\r\n          stroke: new Stroke({\r\n            color: \"#fff\",\r\n            width: 3\r\n          })\r\n        })\r\n      });\r\n\r\n      let vectorLayer = new LayerVector({\r\n        source: new SourceVector({\r\n          features: new GeoJSON().readFeatures(lands, {\r\n            dataProjection: 'EPSG:4326',\r\n            featureProjection: \"EPSG:4326\"\r\n          })\r\n        }),\r\n        style: feature => {\r\n          style.getText().setText(feature.get('name'))\r\n          return style\r\n        }\r\n      })\r\n\r\n      this.map = new Map({\r\n        target: \"map\",\r\n        layers: [vectorLayer],\r\n        view: new View({\r\n          projection: \"EPSG:4326\",\r\n          center: [0, 0],\r\n          zoom: 1\r\n        })\r\n      })\r\n\r\n      this.map.on('pointermove', evt => {\r\n        if (evt.dragging) {\r\n          return ;\r\n        }\r\n        let pixel = this.map.getEventPixel(evt.originalEvent)\r\n        this.displayFeatureInfo(pixel)\r\n      })\r\n\r\n      this.map.on('click',evt => {\r\n        this.displayFeatureInfo(evt.pixel)\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vectorHigh.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vectorHigh.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./vectorHigh.vue?vue&type=template&id=7af8596a&\"\nimport script from \"./vectorHigh.vue?vue&type=script&lang=js&\"\nexport * from \"./vectorHigh.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Text(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.font_ = options.font;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size|undefined}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.text_ = options.text;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textAlign_ = options.textAlign;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textBaseline_ = options.textBaseline;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ =\n            options.fill !== undefined\n                ? options.fill\n                : new Fill({ color: DEFAULT_FILL_COLOR });\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxAngle_ =\n            options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\n         * @private\n         * @type {import(\"./TextPlacement.js\").default|string}\n         */\n        this.placement_ =\n            options.placement !== undefined ? options.placement : TextPlacement.POINT;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overflow_ = !!options.overflow;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.backgroundFill_ = options.backgroundFill\n            ? options.backgroundFill\n            : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.backgroundStroke_ = options.backgroundStroke\n            ? options.backgroundStroke\n            : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.padding_ = options.padding === undefined ? null : options.padding;\n    }\n    /**\n     * Clones the style.\n     * @return {Text} The cloned style.\n     * @api\n     */\n    Text.prototype.clone = function () {\n        var scale = this.getScale();\n        return new Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill()\n                ? this.getBackgroundFill().clone()\n                : undefined,\n            backgroundStroke: this.getBackgroundStroke()\n                ? this.getBackgroundStroke().clone()\n                : undefined,\n            padding: this.getPadding(),\n        });\n    };\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n    Text.prototype.getOverflow = function () {\n        return this.overflow_;\n    };\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n    Text.prototype.getFont = function () {\n        return this.font_;\n    };\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n    Text.prototype.getMaxAngle = function () {\n        return this.maxAngle_;\n    };\n    /**\n     * Get the label placement.\n     * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n     * @api\n     */\n    Text.prototype.getPlacement = function () {\n        return this.placement_;\n    };\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n    Text.prototype.getOffsetX = function () {\n        return this.offsetX_;\n    };\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n    Text.prototype.getOffsetY = function () {\n        return this.offsetY_;\n    };\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n    Text.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n    Text.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n    Text.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    Text.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Get the text to be rendered.\n     * @return {string|undefined} Text.\n     * @api\n     */\n    Text.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Get the text alignment.\n     * @return {string|undefined} Text align.\n     * @api\n     */\n    Text.prototype.getTextAlign = function () {\n        return this.textAlign_;\n    };\n    /**\n     * Get the text baseline.\n     * @return {string|undefined} Text baseline.\n     * @api\n     */\n    Text.prototype.getTextBaseline = function () {\n        return this.textBaseline_;\n    };\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getBackgroundFill = function () {\n        return this.backgroundFill_;\n    };\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getBackgroundStroke = function () {\n        return this.backgroundStroke_;\n    };\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>} Padding.\n     * @api\n     */\n    Text.prototype.getPadding = function () {\n        return this.padding_;\n    };\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n    Text.prototype.setOverflow = function (overflow) {\n        this.overflow_ = overflow;\n    };\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n    Text.prototype.setFont = function (font) {\n        this.font_ = font;\n    };\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n    Text.prototype.setMaxAngle = function (maxAngle) {\n        this.maxAngle_ = maxAngle;\n    };\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n    Text.prototype.setOffsetX = function (offsetX) {\n        this.offsetX_ = offsetX;\n    };\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n    Text.prototype.setOffsetY = function (offsetY) {\n        this.offsetY_ = offsetY;\n    };\n    /**\n     * Set the text placement.\n     *\n     * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n     * @api\n     */\n    Text.prototype.setPlacement = function (placement) {\n        this.placement_ = placement;\n    };\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    Text.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n    Text.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n    Text.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    };\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Set the text.\n     *\n     * @param {string|undefined} text Text.\n     * @api\n     */\n    Text.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Set the text alignment.\n     *\n     * @param {string|undefined} textAlign Text align.\n     * @api\n     */\n    Text.prototype.setTextAlign = function (textAlign) {\n        this.textAlign_ = textAlign;\n    };\n    /**\n     * Set the text baseline.\n     *\n     * @param {string|undefined} textBaseline Text baseline.\n     * @api\n     */\n    Text.prototype.setTextBaseline = function (textBaseline) {\n        this.textBaseline_ = textBaseline;\n    };\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setBackgroundFill = function (fill) {\n        this.backgroundFill_ = fill;\n    };\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setBackgroundStroke = function (stroke) {\n        this.backgroundStroke_ = stroke;\n    };\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {!Array<number>} padding Padding.\n     * @api\n     */\n    Text.prototype.setPadding = function (padding) {\n        this.padding_ = padding;\n    };\n    return Text;\n}());\nexport default Text;\n//# sourceMappingURL=Text.js.map"],"sourceRoot":""}